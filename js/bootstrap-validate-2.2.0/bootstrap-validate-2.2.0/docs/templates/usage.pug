extends layouts/app

block nav
  - var active = "Usage"

block vars
  - var title = "Usage"
  - var description = meta.name + " is built with ease-of-use in mind. You don't need to be a JavaScript Wizard to use this library!"


block content

  +pageTitle(active, description)

  h2 The
    strong
      |    bootstrapValidate()
    |   function

  p This library exposes a single function:
    code.javascript bootstrapValidate()
    |.

  p Currently, you can pass up to 3 Arguments:
  ul
    li The first Argument is the
      strong
        |  Element
      |  to be validated:
      code.javascript bootstrapValidate('#myInput')
    li The second Argument is any number of
      strong
        |  rules
      |:
      code.javascript bootstrapValidate('#myInput', 'rule')
    li While the last Argument is an
      strong
        |  optional callback
      |   function knowing about the validity of the input:

  pre
    code.javascript bootstrapValidate('#myInput', 'rule', function (isValid) {
      |
      |    if (isValid) {
      |        alert('Element is valid');
      |    } else {
      |        alert('Element is invalid');
      |    }
      | });


  h2 Passing an Element

  p Passing an Element to #{meta.name} is exactly the same as using
    code.javascript document.querySelector()
    |, so you can pass a class
    code.javascript bootstrapValidate('.myClass')
    |, an id
    code.javascript bootstrapValidate('#myId')
    | or any other query
    code.javascript bootstrapValidate('input[type="text"]')
    |.

  h3 Passing Multiple Elements

  p If you want to apply the same validation rules to multiple input elements, you can pass an Array of selectors:

  pre
    code.javascript bootstrapValidate(['#prename', '#lastname'], 'max:20:Enter no more than 20 characters!');

  p Read more about&nbsp;
    a(href="https://developer.mozilla.org/en/docs/Web/API/Document/querySelector") document.querySelector
    |.


  h2 About
    strong
      |  Rules
    |  and
    strong
      |   Options

  p Throughout the documentation around #{meta.name} we make use of two (and only two) concepts: Rules and Options.

  h3 What is a Rule?
  p A rule is a condition to be met for your input element. If you wanted your visitor to enter an E-mail address,
    |  You would want to make use of the
    strong
      |   email
    |   rule.

  pre
    code.javascript bootstrapValidate('#input', 'email')

  p Of course, you can pass multiple rules.

  p.alert.alert-info Separate multiple rules with a
    |&nbsp;
    strong(style="font-size: 28px")=constants.SEPARATOR_RULE
    |.

  pre
    code.javascript bootstrapValidate('#input', 'email#{constants.SEPARATOR_RULE}required'

  h3 But wait, there is Options!
  p The examples above would not work if you pasted them right into your Code.
    strong  Every rule has to be supplied with at least one Option:
    |  The error text, which comes after all other options.

  p In the following, we will use the email rule, which does not have any options except from the
    |  obligatory error text.

  p.alert.alert-info Separate options with a
    |&nbsp;
    strong(style="font-size: 28px")=constants.SEPARATOR_OPTION
    |.
  pre
    code.javascript bootstrapValidate('#email', 'email#{constants.SEPARATOR_OPTION}Enter a valid E-Mail!')

  .form-group
    label.col-sm-2 Ty it!
    input.form-control#docs_usage_email(placeholder="jon@example.org")


  p(style="margin-top: 20px;") Options are the place to supply necessary rule parameters. For Instance, there is a
    strong  min
    |  rule telling your user to fill in at least X characters. If you wanted to make that 5 characters,
    | you would write
    code.javascript bootstrapValidate('#input', 'min:5:Enter at least 5 Characters');

  a.btn.btn-lg.btn-outline-primary.pull-left(href="installation.html") ← Installation
  a.btn.btn-lg.btn-primary.pull-right(href="download.html") Download →


append scripts
      script.
        bootstrapValidate('#docs_usage_email', 'email:Enter a valid E-Mail!')
